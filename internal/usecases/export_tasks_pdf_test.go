package usecases

import (
	"bytes"
	"context"
	"testing"
	"time"

	"github.com/ia-edev-sindireceita/todo/internal/domain/application"
)

// MockTaskRepository for testing
type MockExportTaskRepository struct {
	tasks []*application.Task
	err   error
}

func (m *MockExportTaskRepository) FindByOwnerID(ctx context.Context, ownerID string) ([]*application.Task, error) {
	if m.err != nil {
		return nil, m.err
	}
	return m.tasks, nil
}

func (m *MockExportTaskRepository) Create(ctx context.Context, task *application.Task) error {
	return nil
}

func (m *MockExportTaskRepository) Update(ctx context.Context, task *application.Task) error {
	return nil
}

func (m *MockExportTaskRepository) Delete(ctx context.Context, id string) error {
	return nil
}

func (m *MockExportTaskRepository) FindByID(ctx context.Context, id string) (*application.Task, error) {
	return nil, nil
}

func (m *MockExportTaskRepository) FindSharedWithUser(ctx context.Context, userID string) ([]*application.Task, error) {
	return nil, nil
}

func TestExportTasksPDFUseCase_Execute(t *testing.T) {
	tests := []struct {
		name      string
		ownerID   string
		tasks     []*application.Task
		wantError bool
	}{
		{
			name:    "Export empty task list",
			ownerID: "user-1",
			tasks:   []*application.Task{},
			wantError: false,
		},
		{
			name:    "Export single task",
			ownerID: "user-1",
			tasks: []*application.Task{
				{
					ID:          "task-1",
					Title:       "Test Task",
					Description: "Test Description",
					Status:      application.StatusPending,
					OwnerID:     "user-1",
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
				},
			},
			wantError: false,
		},
		{
			name:    "Export multiple tasks",
			ownerID: "user-1",
			tasks: []*application.Task{
				{
					ID:          "task-1",
					Title:       "Task 1",
					Description: "Description 1",
					Status:      application.StatusPending,
					OwnerID:     "user-1",
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
				},
				{
					ID:          "task-2",
					Title:       "Task 2",
					Description: "Description 2",
					Status:      application.StatusCompleted,
					OwnerID:     "user-1",
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
				},
			},
			wantError: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockRepo := &MockExportTaskRepository{
				tasks: tt.tasks,
			}

			useCase := NewExportTasksPDFUseCase(mockRepo)
			ctx := context.Background()

			pdfBytes, err := useCase.Execute(ctx, tt.ownerID)

			if tt.wantError && err == nil {
				t.Error("Expected error but got none")
			}

			if !tt.wantError && err != nil {
				t.Errorf("Unexpected error: %v", err)
			}

			if !tt.wantError {
				if pdfBytes == nil {
					t.Error("Expected PDF bytes but got nil")
				}

				if len(pdfBytes) == 0 {
					t.Error("Expected non-empty PDF bytes")
				}

				// Check if it's a valid PDF by checking the PDF header
				if !bytes.HasPrefix(pdfBytes, []byte("%PDF-")) {
					t.Error("Generated bytes do not start with PDF header")
				}
			}
		})
	}
}
